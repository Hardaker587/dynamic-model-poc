/* tslint:disable */
/* eslint-disable */
/**
 * Swagger
 * This is a sample server
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Token,
    TokenFromJSON,
    TokenToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface ApiAuthPostRequest {
    user: User;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Get user info
     */
    async apiAuthGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/api/auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get user info
     */
    async apiAuthGet(initOverrides?: RequestInit): Promise<void> {
        await this.apiAuthGetRaw(initOverrides);
    }

    /**
     * Login user and get token
     */
    async apiAuthPostRaw(requestParameters: ApiAuthPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling apiAuthPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Login user and get token
     */
    async apiAuthPost(requestParameters: ApiAuthPostRequest, initOverrides?: RequestInit): Promise<Token> {
        const response = await this.apiAuthPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
