/* tslint:disable */
/* eslint-disable */
/**
 * Swagger
 * This is a sample server
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DynamicDataRequestModel,
    DynamicDataRequestModelFromJSON,
    DynamicDataRequestModelToJSON,
    DynamicModel,
    DynamicModelFromJSON,
    DynamicModelToJSON,
} from '../models';

export interface ApiDynamicModelsCreateDataPostRequest {
    model: DynamicDataRequestModel;
}

export interface ApiDynamicModelsDeleteRequest {
    documentId: string;
}

export interface ApiDynamicModelsPostRequest {
    model: DynamicModel;
}

/**
 * 
 */
export class DynamicModelsApi extends runtime.BaseAPI {

    /**
     * Create data for specified Data Model
     */
    async apiDynamicModelsCreateDataPostRaw(requestParameters: ApiDynamicModelsCreateDataPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling apiDynamicModelsCreateDataPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/api/dynamicModels/createData`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DynamicDataRequestModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create data for specified Data Model
     */
    async apiDynamicModelsCreateDataPost(requestParameters: ApiDynamicModelsCreateDataPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiDynamicModelsCreateDataPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get all dynamic models
     */
    async apiDynamicModelsDeleteRaw(requestParameters: ApiDynamicModelsDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling apiDynamicModelsDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.documentId !== undefined) {
            queryParameters['documentId'] = requestParameters.documentId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/api/dynamicModels`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all dynamic models
     */
    async apiDynamicModelsDelete(requestParameters: ApiDynamicModelsDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiDynamicModelsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get all dynamic models
     */
    async apiDynamicModelsGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/api/dynamicModels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all dynamic models
     */
    async apiDynamicModelsGet(initOverrides?: RequestInit): Promise<void> {
        await this.apiDynamicModelsGetRaw(initOverrides);
    }

    /**
     * Create and control dynamic models
     */
    async apiDynamicModelsPostRaw(requestParameters: ApiDynamicModelsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.model === null || requestParameters.model === undefined) {
            throw new runtime.RequiredError('model','Required parameter requestParameters.model was null or undefined when calling apiDynamicModelsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        const response = await this.request({
            path: `/api/dynamicModels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DynamicModelToJSON(requestParameters.model),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create and control dynamic models
     */
    async apiDynamicModelsPost(requestParameters: ApiDynamicModelsPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiDynamicModelsPostRaw(requestParameters, initOverrides);
    }

}
